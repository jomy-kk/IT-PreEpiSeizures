from datetime import datetime, timedelta

from datetimerange import DateTimeRange
from multipledispatch import dispatch


class Event():
    @dispatch(str, datetime)
    def __init__(self, name: str, onset: datetime | str) -> Event: ...
    @dispatch(str, datetime)
    def __init__(self, name: str, offset: datetime | str) -> Event: ...
    @dispatch(str, datetime)
    def __init__(self, name: str, onset: datetime | str, offset: datetime | str) -> Event: ...

    # BOOLEAN CHECKERS
    @property
    def has_onset(self) -> bool: ...
    @property
    def has_offset(self) -> bool: ...

    # GETTERS
    @property
    def duration(self) -> timedelta: ...
    @property
    def domain(self) -> DateTimeRange: ...
    @property
    def name(self) -> str: ...
    @property
    def onset(self) -> datetime: ...
    @property
    def offset(self) -> datetime: ...

    # SETTERS
    @onset.setter
    def onset(self, datetime: datetime): ...
    @offset.setter
    def offset(self, datetime: datetime): ...

    # BUILT-INS (Basic)
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

    # BUILT-INS (Logic with Time)
    def __eq__(self, other: Event) -> bool: ...
    def __ne__(self, other: Event) -> bool: ...
    def __lt__(self, other: Event) -> bool: ...
    def __le__(self, other: Event) -> bool: ...
    def __gt__(self, other: Event) -> bool: ...
    def __ge__(self, other: Event) -> bool: ...

    # SERIALIZATION
    __SERIALVERSION: int = 1
    def __hash__(self) -> int: ...
    def __getstate__(self) -> tuple: ...
    def __setstate__(self, state: tuple) -> None: ...
