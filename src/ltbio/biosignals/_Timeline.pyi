# -- encoding: utf-8 --
# ===================================

# IT - LongTermBiosignals

# Package: src/ltbio/biosignals/timeseries 
# Module: Timeline
# Description: 

# Contributors: JoÃ£o Saraiva
# Created: 08/02/2023


# ===================================

from datetime import datetime, timedelta
from typing import Iterable

from datetimerange import DateTimeRange
from multipledispatch import dispatch


class Timeline():
    class Group():

        # INITIALIZERS
        @dispatch(DateTimeRange, str, str)  # Set of Intervals in time
        def __init__(self, *intervals: DateTimeRange, name: str = None) -> Timeline.Group: ...
        @dispatch(datetime, str, str)  # Set of Points in time
        def __init__(self, *points: datetime, name: str = None) -> Timeline.Group:...

        # BUILT-INS (Basics)
        def __repr__(self) -> str: ...
        def __str__(self) -> str: ...

        # GETTERS
        @property
        def name(self) -> str: ...
        @property
        def start(self) -> datetime | None: ...
        @property
        def end(self) -> datetime | None: ...
        @property
        def duration(self) -> timedelta: ...

        # SETTERS
        @name.setter
        def name(self, name: str) -> None: ...

        # BOOLEAN CHECKERS
        @property
        def has_only_intervals(self) -> bool: ...
        @property
        def has_intervals(self) -> bool: ...
        @property
        def has_only_points(self) -> bool: ...
        @property
        def has_points(self) -> bool: ...
        @property
        def is_empty(self) -> bool: ...


    # INITIALIZERS
    def __init__(self, *groups: Group, name: str = None) -> Timeline: ...

    # GETTERS
    @property
    def name(self) -> str: ...
    @property
    def group_names(self) -> set[str]: ...
    @property
    def start(self) -> datetime | None: ...
    @property
    def end(self) -> datetime | None: ...
    @property
    def duration(self) -> timedelta: ...
    @property
    def single_group(self) -> Group: ...

    # SETTERS
    @name.setter
    def name(self, name: str) -> None: ...

    # BOOLEAN CHECKERS
    @property
    def has_single_group(self) -> bool: ...
    @property
    def is_empty(self) -> bool: ...
    @property
    def is_index(self) -> bool: ...

    # BUILT-INS (Basics)
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

    # BUILT-INS (Joining Timelines)
    def __and__(self, other: Timeline) -> Timeline: ...
    def __rshift__(self, other: Timeline) -> Timeline: ...
    def __sub__(self, other) -> Timeline: ...
    @classmethod
    def union(cls, *timelines) -> Timeline: ...
    @classmethod
    def intersection(cls, *timelines) -> Timeline: ...

    # BUILT-INS (Indexing)
    def __getitem__(self, *group: str) -> Timeline: ...
    def __iter__(self) -> Iterable[Timeline.Group]: ...

    # USEFUL TOOLS
    def agglomerate(self, min_interval: timedelta, max_delta: timedelta) -> Timeline: ...

    # PLOTTING
    def plot(self, show: bool = True, save_to: str = None): ...
    def _repr_png_(self): ...

    # SERIALIZATION
    EXTENSION = '.timeline'
    def save(self, filepath: str) -> None: ...
    @classmethod
    def load(cls, filepath: str) -> Timeline: ...
