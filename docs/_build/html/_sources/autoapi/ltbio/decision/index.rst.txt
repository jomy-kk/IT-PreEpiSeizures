
:py:mod:`ltbio.decision`
========================

.. py:module:: ltbio.decision


Overview
----------------


Submodules
~~~~~~~
.. toctree::
   :titlesonly:
   :maxdepth: 1

   BinaryDecision/index.rst
   Decision/index.rst
   DecisionMaker/index.rst
   NAryDecision/index.rst






Classes
~~~~~~~
.. list-table::
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`BinaryDecision <ltbio.decision.BinaryDecision>`
     - Helper class that provides a standard way to create an ABC using
   * - :py:obj:`NAryDecision <ltbio.decision.NAryDecision>`
     - Helper class that provides a standard way to create an ABC using
   * - :py:obj:`DecisionMaker <ltbio.decision.DecisionMaker>`
     - A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).









Contents
----------------

.. py:class:: BinaryDecision(decision_function: Callable[[ltbio.biosignals.Timeseries], bool], name=None)

   Bases: :py:obj:`ltbio.decision.Decision.Decision`

   .. autoapi-inheritance-diagram:: ltbio.decision.BinaryDecision
      :parts: 1

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: evaluate(object: ltbio.biosignals.Timeseries) -> bool



.. py:class:: NAryDecision(decision_function: Callable[[ltbio.biosignals.Timeseries], int], name=None)

   Bases: :py:obj:`ltbio.decision.Decision.Decision`

   .. autoapi-inheritance-diagram:: ltbio.decision.NAryDecision
      :parts: 1

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: evaluate(object: ltbio.biosignals.Timeseries) -> int



.. py:class:: DecisionMaker(decision: ltbio.decision.Decision.Decision, name: str = None)

   Bases: :py:obj:`ltbio.pipeline.PipelineUnit.SinglePipelineUnit`

   .. autoapi-inheritance-diagram:: ltbio.decision.DecisionMaker
      :parts: 1

   A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   Following the Command design pattern, a SingleUnit is the abstract 'Command', so that Pipeline can execute various
   kinds of processing by calling the 'apply' method of each concrete unit.

   Subclasses
   ------------
   E.g. Filter, Segmenter, FeatureExtractor, FeatureSelector, SupervisingTrainer, DecisionMaker
   Any subclass that implements 'apply'.

   Abstract Method 'apply'
   ------------
   Every subclass must define 'apply' and implement a concrete behaviour.
   To map the parameters' names of 'apply' to the labels inside any arriving Packet, PIPELINE_INPUT_LABELS should be
   defined. To map the outputs to the labels of the resulting Packet, PIPELINE_OUTPUT_LABELS should be defined.

   Labels
   ------------
   PIPELINE_INPUT_LABELS
   Maps every label of a needed input inside a Packet to the name of the corresponding 'apply' parameter.
   PIPELINE_OUTPUT_LABELS
   Maps every output name of 'apply' to a label to be saved inside a Packet.

   .. py:attribute:: PIPELINE_INPUT_LABELS

      

   .. py:attribute:: PIPELINE_OUTPUT_LABELS

      

   .. py:attribute:: ART_PATH
      :value: 'resources/pipeline_media/decision_maker.png'

      

   .. py:method:: apply(timeseries: ltbio.biosignals.Timeseries)



