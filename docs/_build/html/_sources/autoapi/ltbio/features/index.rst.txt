
:py:mod:`ltbio.features`
========================

.. py:module:: ltbio.features


Overview
----------------


Submodules
~~~~~~~
.. toctree::
   :titlesonly:
   :maxdepth: 1

   FeatureExtractor/index.rst
   FeatureSelector/index.rst
   Features/index.rst
   SegmentSelector/index.rst






Classes
~~~~~~~
.. list-table::
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`FeatureExtractor <ltbio.features.FeatureExtractor>`
     - A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   * - :py:obj:`FeatureSelector <ltbio.features.FeatureSelector>`
     - A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   * - :py:obj:`TimeFeatures <ltbio.features.TimeFeatures>`
     - Class with implementation of extraction of of several time features.
   * - :py:obj:`HRVFeatures <ltbio.features.HRVFeatures>`
     - Helper class that provides a standard way to create an ABC using









Contents
----------------

.. py:class:: FeatureExtractor(feature_functions: Collection[Callable], name: str = None)

   Bases: :py:obj:`ltbio.pipeline.PipelineUnit.SinglePipelineUnit`

   .. autoapi-inheritance-diagram:: ltbio.features.FeatureExtractor
      :parts: 1

   A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   Following the Command design pattern, a SingleUnit is the abstract 'Command', so that Pipeline can execute various
   kinds of processing by calling the 'apply' method of each concrete unit.

   Subclasses
   ------------
   E.g. Filter, Segmenter, FeatureExtractor, FeatureSelector, SupervisingTrainer, DecisionMaker
   Any subclass that implements 'apply'.

   Abstract Method 'apply'
   ------------
   Every subclass must define 'apply' and implement a concrete behaviour.
   To map the parameters' names of 'apply' to the labels inside any arriving Packet, PIPELINE_INPUT_LABELS should be
   defined. To map the outputs to the labels of the resulting Packet, PIPELINE_OUTPUT_LABELS should be defined.

   Labels
   ------------
   PIPELINE_INPUT_LABELS
   Maps every label of a needed input inside a Packet to the name of the corresponding 'apply' parameter.
   PIPELINE_OUTPUT_LABELS
   Maps every output name of 'apply' to a label to be saved inside a Packet.

   .. py:attribute:: PIPELINE_INPUT_LABELS

      

   .. py:attribute:: PIPELINE_OUTPUT_LABELS

      

   .. py:attribute:: ART_PATH
      :value: 'resources/pipeline_media/feature_extractor.png'

      

   .. py:method:: apply(timeseries: ltbio.biosignals.Timeseries) -> Dict[str, ltbio.biosignals.Timeseries]



.. py:class:: FeatureSelector(selection_function: Callable[[numpy.ndarray], bool], name: str = None)

   Bases: :py:obj:`ltbio.pipeline.PipelineUnit.SinglePipelineUnit`

   .. autoapi-inheritance-diagram:: ltbio.features.FeatureSelector
      :parts: 1

   A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   Following the Command design pattern, a SingleUnit is the abstract 'Command', so that Pipeline can execute various
   kinds of processing by calling the 'apply' method of each concrete unit.

   Subclasses
   ------------
   E.g. Filter, Segmenter, FeatureExtractor, FeatureSelector, SupervisingTrainer, DecisionMaker
   Any subclass that implements 'apply'.

   Abstract Method 'apply'
   ------------
   Every subclass must define 'apply' and implement a concrete behaviour.
   To map the parameters' names of 'apply' to the labels inside any arriving Packet, PIPELINE_INPUT_LABELS should be
   defined. To map the outputs to the labels of the resulting Packet, PIPELINE_OUTPUT_LABELS should be defined.

   Labels
   ------------
   PIPELINE_INPUT_LABELS
   Maps every label of a needed input inside a Packet to the name of the corresponding 'apply' parameter.
   PIPELINE_OUTPUT_LABELS
   Maps every output name of 'apply' to a label to be saved inside a Packet.

   .. py:attribute:: PIPELINE_INPUT_LABELS

      

   .. py:attribute:: PIPELINE_OUTPUT_LABELS

      

   .. py:attribute:: ART_PATH
      :value: 'resources/pipeline_media/feature_selector.png'

      

   .. py:method:: apply(features: Dict[str, ltbio.biosignals.Timeseries]) -> Dict[str, ltbio.biosignals.Timeseries]



.. py:class:: TimeFeatures

   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: ltbio.features.TimeFeatures
      :parts: 1

   Class with implementation of extraction of of several time features.

   .. py:method:: mean(segment: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: variance(segment: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: deviation(segment: numpy.ndarray) -> float
      :staticmethod:



.. py:class:: HRVFeatures

   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: ltbio.features.HRVFeatures
      :parts: 1

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: nn50(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: pnn50(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: sdnn(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: rmssd(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: mean(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: var(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: hr(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: max_hr(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: lf(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: hf(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: lf_hf(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: hf_lf(nni: ltbio.biosignals.Timeseries) -> float
      :staticmethod:


   .. py:method:: sd1(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: sd2(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: csi(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: csv(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: s(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: rec(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: det(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: lmax(nni: numpy.ndarray) -> float
      :staticmethod:


   .. py:method:: sampen(nni: numpy.ndarray)
      :staticmethod:


   .. py:method:: get_sampen_backup()


   .. py:method:: get_cosen()



