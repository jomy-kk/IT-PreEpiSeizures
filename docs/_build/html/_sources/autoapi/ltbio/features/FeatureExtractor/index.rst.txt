
:py:mod:`ltbio.features.FeatureExtractor`
=========================================

.. py:module:: ltbio.features.FeatureExtractor


Overview
---------------






Classes
~~~~~~~
.. list-table::
   :header-rows: 0
   :widths: auto
   :class: summarytable

   * - :py:obj:`FeatureExtractor <ltbio.features.FeatureExtractor.FeatureExtractor>`
     - A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).









Contents
---------------

.. py:class:: FeatureExtractor(feature_functions: Collection[Callable], name: str = None)

   Bases: :py:obj:`ltbio.pipeline.PipelineUnit.SinglePipelineUnit`

   .. autoapi-inheritance-diagram:: ltbio.features.FeatureExtractor.FeatureExtractor
      :parts: 1

   A Single Pipeline Unit is any agent that can act (use, process or make changes) to a collection (usually of Timeseries).
   Following the Command design pattern, a SingleUnit is the abstract 'Command', so that Pipeline can execute various
   kinds of processing by calling the 'apply' method of each concrete unit.

   Subclasses
   ------------
   E.g. Filter, Segmenter, FeatureExtractor, FeatureSelector, SupervisingTrainer, DecisionMaker
   Any subclass that implements 'apply'.

   Abstract Method 'apply'
   ------------
   Every subclass must define 'apply' and implement a concrete behaviour.
   To map the parameters' names of 'apply' to the labels inside any arriving Packet, PIPELINE_INPUT_LABELS should be
   defined. To map the outputs to the labels of the resulting Packet, PIPELINE_OUTPUT_LABELS should be defined.

   Labels
   ------------
   PIPELINE_INPUT_LABELS
   Maps every label of a needed input inside a Packet to the name of the corresponding 'apply' parameter.
   PIPELINE_OUTPUT_LABELS
   Maps every output name of 'apply' to a label to be saved inside a Packet.

   .. py:attribute:: PIPELINE_INPUT_LABELS

      

   .. py:attribute:: PIPELINE_OUTPUT_LABELS

      

   .. py:attribute:: ART_PATH
      :value: 'resources/pipeline_media/feature_extractor.png'

      

   .. py:method:: apply(timeseries: ltbio.biosignals.Timeseries) -> Dict[str, ltbio.biosignals.Timeseries]



